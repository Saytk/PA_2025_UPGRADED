@using Quantia.Models
@using System.Text.Json           
@model IEnumerable<TradeModel>
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    ViewBag.Section = "Trades";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>My Trades</h1>
@{
    var totalTrades = Model.Count();
    var closedTrades = Model.Where(t => t.SellPrice.HasValue).ToList();
    var openTrades = Model.Where(t => !t.SellPrice.HasValue).ToList();

    var pnlList = closedTrades.Select(t => t.PnL ?? 0).ToList();
    var totalPnL = pnlList.Sum();
    var winCount = pnlList.Count(p => p > 0);
    var lossCount = pnlList.Count(p => p < 0);

    var bestTrade = closedTrades.OrderByDescending(t => t.PnL ?? 0).FirstOrDefault();
    var worstTrade = closedTrades.OrderBy(t => t.PnL ?? 0).FirstOrDefault();

    var totalInvested = Model.Sum(t => t.BuyPrice * t.Quantity);
    var totalRecovered = closedTrades.Sum(t => t.SellPrice!.Value * t.Quantity);
}

<div style="margin-bottom:30px; background:#fff; border:1px solid #e5e7eb; border-radius:10px; padding:24px; box-shadow:0 1px 4px rgba(0,0,0,0.05); max-width:800px;">
    <h3 style="margin-bottom:20px;">📊 Trade Summary</h3>
    <div style="display:grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap:16px;">
        <div><strong>Total Trades:</strong> @totalTrades</div>
        <div><strong>Open:</strong> @openTrades.Count</div>
        <div><strong>Closed:</strong> @closedTrades.Count</div>
        <div><strong>Winners:</strong> @winCount</div>
        <div><strong>Losers:</strong> @lossCount</div>
        <div><strong>Total PnL:</strong> <span style="color:@(totalPnL >= 0 ? "green" : "red")">@totalPnL.ToString("F2")</span></div>
        <div><strong>Invested:</strong> $@totalInvested.ToString("F2")</div>
        <div><strong>Recovered:</strong> $@totalRecovered.ToString("F2")</div>

        @if (bestTrade != null)
        {
            <div><strong>Best:</strong> @bestTrade.CryptoSymbol (@bestTrade.PnL?.ToString("F2")$)</div>
        }
        @if (worstTrade != null)
        {
            <div><strong>Worst:</strong> @worstTrade.CryptoSymbol (@worstTrade.PnL?.ToString("F2")$)</div>
        }
    </div>
</div>
<!-- Canvas du graphique -->

@{
    var chartData = closedTrades.Select(t => new
    {
        symbol = t.CryptoSymbol,
        pnl = (t.PnL ?? 0).ToString("F2", System.Globalization.CultureInfo.InvariantCulture)
    });
}

<div style="display: flex; gap: 24px; flex-wrap: wrap; margin-bottom: 40px;">
    <div style="flex: 1; min-width: 300px;">
        <canvas id="pnlOverTimeChart" height="200"></canvas>
    </div>
    <div style="flex: 1; min-width: 300px;">
        <canvas id="pnlByAssetChart" height="200"></canvas>
    </div>
    <div style="flex: 1; min-width: 300px;">
        <canvas id="winLossChart" height="200"></canvas>
    </div>
</div>


@{

    var pnlOverTime = closedTrades
        .OrderBy(t => t.SellDate)
        .Select(t => new
        {
            date = t.SellDate!.Value.ToString("yyyy-MM-dd"),
            pnl = (t.PnL ?? 0)
        }).ToList();

    var pnlByAsset = closedTrades
        .GroupBy(t => t.CryptoSymbol)
        .Select(g => new
        {
            symbol = g.Key,
            pnl = g.Sum(t => t.PnL ?? 0)
        }).ToList();

    var winLossData = new
    {
        wins = closedTrades.Count(t => t.PnL > 0),
        losses = closedTrades.Count(t => t.PnL < 0),
        breakeven = closedTrades.Count(t => t.PnL == 0)
    };
}
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js" integrity="sha384-e6nUZLBkQ86NJ6TVVKAeSaK8jWa3NhkYWZFomE39AvDbQWeie9PlQqM3pmYW5d1g" crossorigin="anonymous"></script>

    <script>
        const pnlOverTime = @Html.Raw(Json.Serialize(pnlOverTime));
        const pnlByAsset = @Html.Raw(Json.Serialize(pnlByAsset));
        const winLoss = @Html.Raw(Json.Serialize(winLossData));

        // Évolution du PnL dans le temps
        new Chart(document.getElementById("pnlOverTimeChart"), {
            type: 'line',
            data: {
                labels: pnlOverTime.map(x => x.date),
                datasets: [{
                    label: 'PnL Over Time',
                    data: pnlOverTime.map(x => x.pnl),
                    fill: true,
                    backgroundColor: 'rgba(59, 130, 246, 0.2)',
                    borderColor: 'rgba(59, 130, 246, 1)',
                    tension: 0.3
                }]
            },
            options: {
                scales: { y: { beginAtZero: true } }
            }
        });

        // PnL par crypto
        new Chart(document.getElementById("pnlByAssetChart"), {
            type: 'bar',
            data: {
                labels: pnlByAsset.map(x => x.symbol),
                datasets: [{
                    label: 'PnL by Asset',
                    data: pnlByAsset.map(x => x.pnl),
                    backgroundColor: pnlByAsset.map(x =>
                        x.pnl >= 0 ? 'rgba(34,197,94,0.8)' : 'rgba(239,68,68,0.8)')
                }]
            },
            options: {
                scales: { y: { beginAtZero: true } }
            }
        });

        // Win/Loss
        new Chart(document.getElementById("winLossChart"), {
            type: 'doughnut',
            data: {
                labels: ['Win', 'Loss', 'Break-even'],
                datasets: [{
                    data: [winLoss.wins, winLoss.losses, winLoss.breakeven],
                    backgroundColor: ['#22c55e', '#ef4444', '#94a3b8']
                }]
            }
        });
    </script>
}


<table style="width:100%; border-collapse: collapse; margin-top:20px;">
    <thead>
        <tr style="background:#f3f4f6;">
            <th style="padding:10px; text-align:left;">Coin</th>
            <th style="padding:10px; text-align:right;">Buy&nbsp;Price</th>
            <th style="padding:10px; text-align:right;">Quantity</th>
            <th style="padding:10px; text-align:right;">Buy&nbsp;Date</th>
            <th style="padding:10px; text-align:right;">Sell&nbsp;Price</th>
            <th style="padding:10px; text-align:right;">Sell&nbsp;Date</th>
            <th style="padding:10px; text-align:right;">PnL&nbsp;($)</th>
            <th style="padding:10px; text-align:center;">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var t in Model)
        {
            var pnl = t.PnL ?? 0m;
            var pnlColor = pnl >= 0 ? "green" : "red";
            <tr>
                <td style="padding:10px;">@t.CryptoSymbol</td>
                <td style="padding:10px; text-align:right;">@t.BuyPrice.ToString("F2")</td>
                <td style="padding:10px; text-align:right;">@t.Quantity.ToString("F6")</td>
                <td style="padding:10px; text-align:right;">@t.BuyDate.ToString("yyyy-MM-dd HH:mm")</td>
                <td style="padding:10px; text-align:right;">@(t.SellPrice.HasValue ? t.SellPrice.Value.ToString("F2") : "-")</td>
                <td style="padding:10px; text-align:right;">@(t.SellDate.HasValue ? t.SellDate.Value.ToString("yyyy-MM-dd HH:mm") : "-")</td>
                <td style="padding:10px; text-align:right; color:@pnlColor;">
                    @(t.PnL.HasValue ? pnl.ToString("F2") : "-")
                </td>
                <td style="padding:10px; text-align:center;">
                    @if (t.Status == "Open")
                    {
                        <a href="@Url.Action("Edit", "Trade", new { id = t.Id })">Close</a>
                    }
                    else
                    {
                        <span style="color:#888;">Closed</span>
                    }

                    <!-- bouton Delete identique -->
                    <form asp-action="Delete" asp-controller="Trade"
                          asp-route-id="@t.Id" method="post" style="display:inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit"
                                style="background:none;border:none;color:red;cursor:pointer;">
                            Delete
                        </button>
                    </form>
                </td>
            </tr>
        }
    </tbody>
</table>

<div style="margin-top:30px;">
    <a href="@Url.Action("Create", "Trade")" style="padding:10px 20px; background:#2563eb; color:#fff; border-radius:4px; text-decoration:none;">New Trade</a>
</div>

