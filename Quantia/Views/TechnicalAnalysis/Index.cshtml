@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Section = "TechnicalAnalysis";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Crypto Technical Analysis</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <style>
        .dashboard-heading {
            font-weight: 600;
            letter-spacing: -.02em
        }

        .advice-bullish {
            background: #d1f7d1
        }

        .advice-bearish {
            background: #f8d7da
        }

        .advice-neutral {
            background: #e2e3e5
        }
    </style>
</head>
<body>
    <div class="container-fluid py-4">
        <h1 class="dashboard-heading mb-4">Crypto Technical Analysis</h1>
        <form id="paramsForm" class="row gy-2 gx-3 align-items-center" onsubmit="event.preventDefault(); loadAll();">
            <div class="col-md-2"><label class="form-label mb-0">Symbol</label><select class="form-select" id="symbolSelect"><option value="BTCUSDT">Bitcoin (BTC)</option><option value="ETHUSDT">Ethereum (ETH)</option></select></div>
            <div class="col-md-2"><label class="form-label mb-0">Start</label><input type="datetime-local" class="form-control" id="startDate" /></div>
            <div class="col-md-2"><label class="form-label mb-0">End</label><input type="datetime-local" class="form-control" id="endDate" /></div>
            <div class="col-md-2"><label class="form-label mb-0">Pattern source</label><select class="form-select" id="patternMode"><option value="ml">ML (Sequences)</option><option value="classic">Classic (Candlestick)</option></select></div>
            <div class="col-md-2 d-flex align-items-end"><button class="btn btn-primary w-100" type="submit">Refresh</button></div>
        </form>
        <div id="pattern-summary" class="alert mt-4 advice-neutral" role="alert">🔍 <em>Analysis pending…</em></div>
        <div class="row g-4">
            <div class="col-xl-8"><div class="card shadow-sm"><div class="card-header">Candlestick Chart</div><div class="card-body p-0"><div id="candlestick-chart" style="height:500px;"></div></div></div></div>
            <div class="col-xl-4"><div class="card shadow-sm h-100"><div class="card-header d-flex justify-content-between align-items-center"><span>Decision Assistant</span><span id="loaderAdvice" class="spinner-border spinner-border-sm text-secondary d-none"></span></div><div class="card-body" id="decision-assistant"><p class="text-muted mb-0">Select a time window to get trading signals…</p></div></div></div>
        </div>
        <div class="card shadow-sm mt-4"><div class="card-header">Detected Patterns</div><div class="table-responsive"><table class="table table-sm table-striped mb-0" id="patterns-table"><thead class="table-light"><tr id="patterns-header"></tr></thead><tbody id="patterns-body"></tbody></table></div></div>
        <footer class="small text-muted mt-4">The information provided does not constitute financial advice. Always do your own research.</footer>
    </div>
    <script>
        const qs=s=>document.querySelector(s);const show=s=>qs(s).classList.remove('d-none');const hide=s=>qs(s).classList.add('d-none');let chart,annotations=[];
        function parseUTC(i){return new Date(/Z|[+-]\d{2}:?\d{2}$/.test(i)?i:i+'Z');}
        function localInputValue(d){const p=v=>String(v).padStart(2,'0');return `${d.getFullYear()}-${p(d.getMonth()+1)}-${p(d.getDate())}T${p(d.getHours())}:${p(d.getMinutes())}`;}
        async function loadCandlestickData(){const s=qs('#symbolSelect').value,st=qs('#startDate').value,ed=qs('#endDate').value;const url=`/api/candlestick/load?symbol=${s}&start_date=${st}&end_date=${ed}`;try{const r=await fetch(url);const j=await r.json();const data=j.data.map(d=>({x:parseUTC(d.timestamp_utc).getTime(),y:[d.open,d.high,d.low,d.close]}));const opt={chart:{type:'candlestick',height:500,animations:{enabled:false}},xaxis:{type:'datetime',labels:{datetimeUTC:false}},yaxis:{tooltip:{enabled:true}},series:[{data}],annotations:{xaxis:annotations}};if(!chart){chart=new ApexCharts(qs('#candlestick-chart'),opt);chart.render();}else{chart.updateSeries([{data}]);chart.updateOptions({annotations:{xaxis:annotations}});} }catch(e){console.error(e);alert('Error loading candlestick data');}}
        function interpretPattern(p){if(p.pattern){return `${p.summary} — ${p.detail}`;}const a=Math.abs(p.bias);if(p.direction==='bullish')return a>0.25?'Strong bullish signal: potential reversal or sharp continuation.':'Moderate bullish signal: upside likely.';if(p.direction==='bearish')return a>0.25?'Strong bearish signal: risk of pullback.':'Moderate bearish signal: caution.';return 'Neutral pattern.';}
        function actionAdvice(dir){if(dir==='bullish')return 'Consider opening / adding to a long position, but confirm with trend & volume.';if(dir==='bearish')return 'Consider taking profit or shorting; tighten stops on longs.';return 'Wait for confirmation before acting.';}
        function buildHeaders(m){const h=qs('#patterns-header');h.innerHTML='';h.innerHTML=m==='classic'?'<th>Time</th><th>Pattern</th><th>Dir.</th><th>Summary</th>':'<th>Start</th><th>End</th><th>Sequence</th><th>Dir.</th><th>Bias</th><th>Bullish</th><th>Bearish</th><th>Neutral</th>';}
        async function loadPatterns(){const mode=qs('#patternMode').value;const s=qs('#symbolSelect').value,st=qs('#startDate').value,ed=qs('#endDate').value;const endpoint=mode==='classic'?`/api/candlestick/patterns/classic?symbol=${s}&start_date=${st}&end_date=${ed}`:`/api/candlestick/patterns?symbol=${s}&start_date=${st}&end_date=${ed}`;buildHeaders(mode);try{show('#loaderAdvice');const r=await fetch(endpoint);const j=await r.json();const rows=j.patterns_detected||[];const tbody=qs('#patterns-body');tbody.innerHTML='';annotations=[];if(mode==='classic'){rows.forEach(p=>{const tr=document.createElement('tr');tr.innerHTML=`<td>${p.timestamp.slice(11,16)}</td><td>${p.pattern}</td><td>${p.direction}</td><td>${p.summary}</td>`;tbody.appendChild(tr);annotations.push({x:parseUTC(p.timestamp).getTime(),borderColor:p.direction==='bullish'?'#a5d6a7':'#ef9a9a',label:{style:{background:'#fff'},text:p.direction==='bullish'?'📈':'📉'}});});}else{rows.forEach(p=>{const tr=document.createElement('tr');tr.innerHTML=`<td>${p.start_timestamp.slice(11,16)}</td><td>${p.end_timestamp.slice(11,16)}</td><td><code>${p.sequence.join(', ')}</code></td><td>${p.direction}</td><td>${p.bias.toFixed(3)}</td><td>${(p.bullish_ratio*100).toFixed(1)}%</td><td>${(p.bearish_ratio*100).toFixed(1)}%</td><td>${(p.neutral_ratio*100).toFixed(1)}%</td>`;tbody.appendChild(tr);annotations.push({x:parseUTC(p.end_timestamp).getTime(),borderColor:p.direction==='bullish'?'#a5d6a7':'#ef9a9a',label:{style:{background:'#fff'},text:p.direction==='bullish'?'📈':'📉'}});});}
        const summary=qs('#pattern-summary');if(rows.length){const t=rows[0];const dir=t.direction||'neutral';summary.className=`alert mt-4 advice-${dir}`;summary.innerHTML=t.pattern?`${dir==='bullish'?'📈':'📉'} ${t.pattern} detected at ${t.timestamp.slice(11,16)} – ${t.summary}`:`${dir==='bullish'?'📈':'📉'} Last pattern: <code>${t.sequence.join(', ')}</code> — Bias <strong>${t.bias.toFixed(2)}</strong>`;}else{summary.className='alert mt-4 advice-neutral';summary.textContent='No pattern detected for this period.';}
        const box=qs('#decision-assistant');if(rows.length){const t=rows[0];const emoji=t.direction==='bullish'?'📈':t.direction==='bearish'?'📉':'⏸️';const title=t.pattern?`${t.pattern} (${t.direction})`:`${t.direction==='bullish'?'Bullish':'Bearish'} signal`;let timing=t.pattern?`Detected at ${t.timestamp.slice(11,16)}`:`Valid from ${t.start_timestamp.slice(11,16)} to ${t.end_timestamp.slice(11,16)}`;box.innerHTML=`<p>${emoji} <strong>${title}</strong></p><p class="mb-1">${interpretPattern(t)}</p><p class="mb-1"><em>${actionAdvice(t.direction)}</em></p><small class="text-muted">${timing}</small>`;}else{box.innerHTML='<p class="text-muted">No actionable signal…</p>';}
        loadCandlestickData();}catch(e){console.error(e);}finally{hide('#loaderAdvice');}}
        function loadAll(){loadPatterns();}
        window.addEventListener('load',()=>{const n=new Date();qs('#endDate').value=localInputValue(n);qs('#startDate').value=localInputValue(new Date(n.getTime()-60*60*1000));loadAll();});
    </script>
</body>
</html>