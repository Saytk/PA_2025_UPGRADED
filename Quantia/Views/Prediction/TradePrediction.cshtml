@model Quantia.Models.ViewModels.TradePredictionVM
@using Newtonsoft.Json

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Section = "Live Trades";

    var sigsJson = JsonConvert.SerializeObject(Model.Signals);
}

<form id="trade-form">@Html.AntiForgeryToken()</form>

<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="p-6 max-w-7xl mx-auto">
    <h1 class="text-3xl font-bold text-cyan-400 mb-8 text-center">🚀 Live Trading Signals</h1>

    <!-- Signaux -->
    <div id="signals" class="grid gap-6 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"></div>

    <!-- Positions ouvertes -->
    <h2 class="text-xl mt-10 mb-4 font-semibold text-white">📈 Open Positions</h2>
    <table class="min-w-full table-auto bg-gray-800 text-white rounded overflow-hidden">
        <thead>
            <tr class="bg-cyan-900 text-left text-sm uppercase">
                <th class="p-2">Symbol</th>
                <th class="p-2">Entry</th>
                <th class="p-2">Current</th>
                <th class="p-2">PnL $</th>
                <th class="p-2">PnL %</th>
            </tr>
        </thead>
        <tbody id="positions">
            @foreach (var t in Model.ExecutedTrades.Where(e => e.SellDate == null))
            {
                <tr data-id="@t.Id" data-symbol="@t.CryptoSymbol" data-entry="@t.BuyPrice" data-qty="@t.Quantity">
                    <td class="p-2">@t.CryptoSymbol</td>
                    <td class="p-2">@t.BuyPrice</td>
                    <td class="p-2 current">–</td>
                    <td class="p-2 pnl">–</td>
                    <td class="p-2 pnlpct">–</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    <script>
        const signals = JSON.parse('@Html.Raw(sigsJson)');
        const grid = document.getElementById("signals");

        function buildSignalCard(s) {
            const sideColor = s.Side === "BUY" || s.Side === "LONG" ? "text-green-400" : "text-red-400";
            return `
            <div class="bg-gray-900 p-4 rounded-lg shadow hover:shadow-lg transition">
                <h3 class="text-lg font-semibold ${sideColor} mb-2">${s.Side} – ${s.Symbol}</h3>
                <ul class="text-sm space-y-1 text-gray-300">
                    <li><strong>Entry:</strong> ${s.Entry}</li>
                    <li><strong>SL:</strong> ${s.StopLoss}</li>
                    <li><strong>TP:</strong> ${s.TakeProfit}</li>
                    <li><strong>Confidence:</strong> ${(s.Confidence * 100).toFixed(1)}%</li>
                </ul>
                <button onclick="execTrade('${s.Symbol}', ${s.EntryPrice}, ${s.StopLoss}, ${s.TakeProfit})"
                        class="mt-4 w-full bg-cyan-500 hover:bg-cyan-600 text-white font-medium py-1.5 rounded">
                    Trade
                </button>
            </div>`;
        }

        function renderSignals() {
            grid.innerHTML = signals.length
                ? signals.map(buildSignalCard).join("")
                : `<p class="text-gray-400 col-span-full text-center">No signal available</p>`;
        }

        async function execTrade(symbol, entry, sl, tp) {
            const qty = prompt("Quantity ?", "0.001");
            if (!qty || isNaN(qty)) return;

            const token = document.querySelector('input[name="__RequestVerificationToken"]')?.value;

            if (!token) {
                alert("Security token missing");
                return;
            }

            const model = {
                CryptoSymbol: symbol,
                Quantity: +qty,
                BuyPrice: +entry,
                StopLoss: +sl,
                TakeProfit: +tp,
                BuyDate: new Date().toISOString()
            };

            const response = await fetch('/Trade/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(model)
            });

            if (response.ok) {
                location.reload();
            } else {
                const err = await response.text();
                alert("Trade failed:\n" + err);
            }
        }

        async function updateLivePnL() {
            const rows = document.querySelectorAll("#positions tr");
            for (const row of rows) {
                const symbol = row.dataset.symbol;
                const entry = parseFloat(row.dataset.entry);
                const qty = parseFloat(row.dataset.qty);

                try {
                    const r = await fetch(`/data/${symbol}/last_candle`);
                    const j = await r.json();
                    const last = +j.price_usdt;

                    const pnl = (last - entry) * qty;
                    const pct = ((last - entry) / entry) * 100;

                    row.querySelector(".current").textContent = last.toFixed(2);
                    row.querySelector(".pnl").textContent = pnl.toFixed(2);
                    row.querySelector(".pnlpct").textContent = pct.toFixed(2) + "%";

                    row.classList.toggle("bg-green-900", pnl > 0);
                    row.classList.toggle("bg-red-900", pnl < 0);
                } catch {
                    continue;
                }
            }

            setTimeout(updateLivePnL, 10000);
        }

        renderSignals();
        updateLivePnL();
    </script>
}
